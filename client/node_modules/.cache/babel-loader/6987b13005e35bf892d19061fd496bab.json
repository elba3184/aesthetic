{"ast":null,"code":"import axios from 'axios';\nimport { log } from 'util'; // import Unsplash from 'unsplash-js';\n\nvar path = require('path');\n\nrequire('dotenv').config({\n  path: path.join(__dirname, '.env')\n});\n\nvar service = axios.create({\n  baseURL: process.env.NODE_ENV === 'production' ? '/api' : 'http://localhost:5000/api',\n  withCredentials: true\n});\nconsole.log(process.env.MONGODB_URI); // Unsplash API\n\nvar errHandler = function errHandler(err) {\n  console.error(err);\n\n  if (err.response && err.response.data) {\n    console.error('API response', err.response.data);\n    throw err.response.data.message;\n  }\n\n  throw err;\n};\n\nexport default {\n  service: service,\n  checkLogin: function checkLogin() {\n    return service.get('/checkLogin').then(function (res) {\n      return res.data;\n    }).catch(errHandler);\n  },\n  // This method is synchronous and returns true or false\n  // To know if the user is connected, we just check if we have a value for localStorage.getItem('user')\n  isLoggedIn: function isLoggedIn() {\n    return localStorage.getItem('user') != null;\n  },\n  // This method returns the user from the localStorage\n  // Be careful, the value is the one when the user logged in for the last time\n  getLocalStorageUser: function getLocalStorageUser() {\n    return JSON.parse(localStorage.getItem('user'));\n  },\n  // This method signs up and logs in the user\n  signup: function signup(userInfo) {\n    return service.post('/signup', userInfo).then(function (res) {\n      // If we have localStorage.getItem('user') saved, the application will consider we are loggedin\n      localStorage.setItem('user', JSON.stringify(res.data));\n      return res.data;\n    }).catch(errHandler);\n  },\n  login: function login(username, password) {\n    console.log(\"the log in --- \", username, password);\n    return service.post('/login', {\n      username: username,\n      password: password\n    }).then(function (res) {\n      // If we have localStorage.getItem('user') saved, the application will consider we are loggedin\n      localStorage.setItem('user', JSON.stringify(res.data));\n      return res.data;\n    }).catch(errHandler);\n  },\n  logout: function logout() {\n    localStorage.removeItem('user');\n    return service.get('/logout');\n  },\n  getSecret: function getSecret() {\n    return service.get('/secret').then(function (res) {\n      return res.data;\n    }).catch(errHandler);\n  },\n  addPicture: function addPicture(file) {\n    var formData = new FormData();\n    formData.append('picture', file);\n    return service.post('/endpoint/to/add/a/picture', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    }).then(function (res) {\n      return res.data;\n    }).catch(errHandler);\n  },\n  handleUpload: function handleUpload(theFile) {\n    // console.log('file in service: ', theFile)\n    return service.post('/upload', theFile).then(function (res) {\n      return res.data;\n    }).catch(errHandler);\n  },\n  saveNewThing: function saveNewThing(newThing) {\n    // console.log('new thing is: ', newThing)\n    return service.post('/things/create', newThing).then(function (res) {\n      return res.data;\n    }).catch(errHandler);\n  }\n};","map":{"version":3,"sources":["/Users/elba/Desktop/final-project/client/src/api.js"],"names":["axios","log","path","require","config","join","__dirname","service","create","baseURL","process","env","NODE_ENV","withCredentials","console","MONGODB_URI","errHandler","err","error","response","data","message","checkLogin","get","then","res","catch","isLoggedIn","localStorage","getItem","getLocalStorageUser","JSON","parse","signup","userInfo","post","setItem","stringify","login","username","password","logout","removeItem","getSecret","addPicture","file","formData","FormData","append","headers","handleUpload","theFile","saveNewThing","newThing"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport { log } from 'util'\n// import Unsplash from 'unsplash-js';\nconst path = require('path')\nrequire('dotenv').config({\n  path: path.join(__dirname, '.env')\n})\n\nconst service = axios.create({\n  baseURL: process.env.NODE_ENV === 'production' ?\n    '/api' : 'http://localhost:5000/api',\n  withCredentials: true,\n})\n\nconsole.log(process.env.MONGODB_URI)\n// Unsplash API\n\nconst errHandler = err => {\n  console.error(err)\n  if (err.response && err.response.data) {\n    console.error('API response', err.response.data)\n    throw err.response.data.message\n  }\n  throw err\n}\n\nexport default {\n  service: service,\n  checkLogin() {\n    return service\n      .get('/checkLogin')\n      .then(res => res.data)\n      .catch(errHandler)\n  },\n  // This method is synchronous and returns true or false\n  // To know if the user is connected, we just check if we have a value for localStorage.getItem('user')\n  isLoggedIn() {\n    return localStorage.getItem('user') != null\n  },\n\n  // This method returns the user from the localStorage\n  // Be careful, the value is the one when the user logged in for the last time\n  getLocalStorageUser() {\n    return JSON.parse(localStorage.getItem('user'))\n  },\n\n  // This method signs up and logs in the user\n  signup(userInfo) {\n    return service\n      .post('/signup', userInfo)\n      .then(res => {\n        // If we have localStorage.getItem('user') saved, the application will consider we are loggedin\n        localStorage.setItem('user', JSON.stringify(res.data))\n        return res.data\n      })\n      .catch(errHandler)\n  },\n\n  login(username, password) {\n    console.log(\"the log in --- \", username, password);\n\n    return service\n      .post('/login', {\n        username,\n        password,\n      })\n      .then(res => {\n        // If we have localStorage.getItem('user') saved, the application will consider we are loggedin\n        localStorage.setItem('user', JSON.stringify(res.data))\n        return res.data\n      })\n      .catch(errHandler)\n  },\n\n  logout() {\n    localStorage.removeItem('user')\n    return service.get('/logout')\n  },\n\n  getSecret() {\n    return service\n      .get('/secret')\n      .then(res => res.data)\n      .catch(errHandler)\n  },\n\n  addPicture(file) {\n    const formData = new FormData()\n    formData.append('picture', file)\n    return service\n      .post('/endpoint/to/add/a/picture', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      })\n      .then(res => res.data)\n      .catch(errHandler)\n  },\n  handleUpload(theFile) {\n    // console.log('file in service: ', theFile)\n    return service.post('/upload', theFile)\n      .then(res => res.data)\n      .catch(errHandler);\n  },\n\n  saveNewThing(newThing) {\n    // console.log('new thing is: ', newThing)\n    return service.post('/things/create', newThing)\n      .then(res => res.data)\n      .catch(errHandler);\n  }\n}"]},"metadata":{},"sourceType":"module"}