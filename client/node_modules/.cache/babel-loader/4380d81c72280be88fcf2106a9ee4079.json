{"ast":null,"code":"import axios from 'axios'; // import Unsplash from 'unsplash-js';\n\nvar path = require('path');\n\nrequire('dotenv').config({\n  path: path.join(__dirname, '.env')\n});\n\nvar service = axios.create({\n  baseURL: process.env.NODE_ENV === 'production' ? '/api' : 'http://localhost:5000/api',\n  withCredentials: true\n}); // Unsplash API\n\nvar errHandler = function errHandler(err) {\n  console.error(err);\n\n  if (err.response && err.response.data) {\n    console.error('API response', err.response.data);\n    throw err.response.data.message;\n  }\n\n  throw err;\n};\n\nexport default {\n  service: service,\n  checkLogin: function checkLogin() {\n    return service.get('/checkLogin').then(function (res) {\n      return res.data;\n    }).catch(errHandler);\n  },\n  handleUpload: function handleUpload(theFile) {\n    // console.log('file in service: ', theFile)\n    return service.post('/upload', theFile).then(function (res) {\n      return res.data;\n    }).catch(errorHandler);\n  },\n  saveNewThing: function saveNewThing(newThing) {\n    // console.log('new thing is: ', newThing)\n    return service.post('/things/create', newThing).then(function (res) {\n      return res.data;\n    }).catch(errorHandler);\n  },\n  // This method is synchronous and returns true or false\n  // To know if the user is connected, we just check if we have a value for localStorage.getItem('user')\n  isLoggedIn: function isLoggedIn() {\n    return localStorage.getItem('user') != null;\n  },\n  // This method returns the user from the localStorage\n  // Be careful, the value is the one when the user logged in for the last time\n  getLocalStorageUser: function getLocalStorageUser() {\n    return JSON.parse(localStorage.getItem('user'));\n  },\n  // This method signs up and logs in the user\n  signup: function signup(userInfo) {\n    return service.post('/signup', userInfo).then(function (res) {\n      // If we have localStorage.getItem('user') saved, the application will consider we are loggedin\n      localStorage.setItem('user', JSON.stringify(res.data));\n      return res.data;\n    }).catch(errHandler);\n  },\n  login: function login(username, password) {\n    return service.post('/login', {\n      username: username,\n      password: password\n    }).then(function (res) {\n      // If we have localStorage.getItem('user') saved, the application will consider we are loggedin\n      localStorage.setItem('user', JSON.stringify(res.data));\n      return res.data;\n    }).catch(errHandler);\n  },\n  logout: function logout() {\n    localStorage.removeItem('user');\n    return service.get('/logout');\n  },\n  getSecret: function getSecret() {\n    return service.get('/secret').then(function (res) {\n      return res.data;\n    }).catch(errHandler);\n  },\n  addPicture: function addPicture(file) {\n    var formData = new FormData();\n    formData.append('picture', file);\n    return service.post('/endpoint/to/add/a/picture', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    }).then(function (res) {\n      return res.data;\n    }).catch(errHandler);\n  }\n};","map":{"version":3,"sources":["/Users/elba/Desktop/final-project/client/src/api.js"],"names":["axios","path","require","config","join","__dirname","service","create","baseURL","process","env","NODE_ENV","withCredentials","errHandler","err","console","error","response","data","message","checkLogin","get","then","res","catch","handleUpload","theFile","post","errorHandler","saveNewThing","newThing","isLoggedIn","localStorage","getItem","getLocalStorageUser","JSON","parse","signup","userInfo","setItem","stringify","login","username","password","logout","removeItem","getSecret","addPicture","file","formData","FormData","append","headers"],"mappings":"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","sourcesContent":["import axios from 'axios'\n// import Unsplash from 'unsplash-js';\nconst path = require('path')\nrequire('dotenv').config({\n  path: path.join(__dirname, '.env')\n})\n\n\n\nconst service = axios.create({\n  baseURL: process.env.NODE_ENV === 'production' ?\n    '/api' : 'http://localhost:5000/api',\n  withCredentials: true,\n})\n\n// Unsplash API\n\nconst errHandler = err => {\n  console.error(err)\n  if (err.response && err.response.data) {\n    console.error('API response', err.response.data)\n    throw err.response.data.message\n  }\n  throw err\n}\n\nexport default {\n  service: service,\n  checkLogin() {\n    return service\n      .get('/checkLogin')\n      .then(res => res.data)\n      .catch(errHandler)\n  },\n\n  handleUpload(theFile) {\n    // console.log('file in service: ', theFile)\n    return service.post('/upload', theFile)\n      .then(res => res.data)\n      .catch(errorHandler);\n  },\n\n  saveNewThing(newThing) {\n    // console.log('new thing is: ', newThing)\n    return service.post('/things/create', newThing)\n      .then(res => res.data)\n      .catch(errorHandler);\n  },\n\n  // This method is synchronous and returns true or false\n  // To know if the user is connected, we just check if we have a value for localStorage.getItem('user')\n  isLoggedIn() {\n    return localStorage.getItem('user') != null\n  },\n\n  // This method returns the user from the localStorage\n  // Be careful, the value is the one when the user logged in for the last time\n  getLocalStorageUser() {\n    return JSON.parse(localStorage.getItem('user'))\n  },\n\n  // This method signs up and logs in the user\n  signup(userInfo) {\n    return service\n      .post('/signup', userInfo)\n      .then(res => {\n        // If we have localStorage.getItem('user') saved, the application will consider we are loggedin\n        localStorage.setItem('user', JSON.stringify(res.data))\n        return res.data\n      })\n      .catch(errHandler)\n  },\n\n  login(username, password) {\n    return service\n      .post('/login', {\n        username,\n        password,\n      })\n      .then(res => {\n        // If we have localStorage.getItem('user') saved, the application will consider we are loggedin\n        localStorage.setItem('user', JSON.stringify(res.data))\n        return res.data\n      })\n      .catch(errHandler)\n  },\n\n  logout() {\n    localStorage.removeItem('user')\n    return service.get('/logout')\n  },\n\n  getSecret() {\n    return service\n      .get('/secret')\n      .then(res => res.data)\n      .catch(errHandler)\n  },\n\n  addPicture(file) {\n    const formData = new FormData()\n    formData.append('picture', file)\n    return service\n      .post('/endpoint/to/add/a/picture', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      })\n      .then(res => res.data)\n      .catch(errHandler)\n  },\n}"]},"metadata":{},"sourceType":"module"}