{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/elba/Desktop/final-project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _possibleConstructorReturn = require(\"/Users/elba/Desktop/final-project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/elba/Desktop/final-project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/elba/Desktop/final-project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar SchemaTypeOptions = require('./SchemaTypeOptions');\n\nvar SchemaStringOptions =\n/*#__PURE__*/\nfunction (_SchemaTypeOptions) {\n  _inherits(SchemaStringOptions, _SchemaTypeOptions);\n\n  function SchemaStringOptions() {\n    _classCallCheck(this, SchemaStringOptions);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(SchemaStringOptions).apply(this, arguments));\n  }\n\n  return SchemaStringOptions;\n}(SchemaTypeOptions);\n\nvar opts = {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: null\n};\n/**\n * Array of allowed values for this path\n *\n * @api public\n * @property enum\n * @memberOf SchemaStringOptions\n * @type Array\n * @instance\n */\n\nObject.defineProperty(SchemaStringOptions.prototype, 'enum', opts);\n/**\n * Attach a validator that succeeds if the data string matches the given regular\n * expression, and fails otherwise.\n *\n * @api public\n * @property match\n * @memberOf SchemaStringOptions\n * @type RegExp\n * @instance\n */\n\nObject.defineProperty(SchemaStringOptions.prototype, 'match', opts);\n/**\n * If truthy, Mongoose will add a custom setter that lowercases this string\n * using JavaScript's built-in `String#toLowerCase()`.\n *\n * @api public\n * @property lowercase\n * @memberOf SchemaStringOptions\n * @type Boolean\n * @instance\n */\n\nObject.defineProperty(SchemaStringOptions.prototype, 'lowercase', opts);\n/**\n * If truthy, Mongoose will add a custom setter that removes leading and trailing\n * whitespace using JavaScript's built-in `String#trim()`.\n *\n * @api public\n * @property trim\n * @memberOf SchemaStringOptions\n * @type Boolean\n * @instance\n */\n\nObject.defineProperty(SchemaStringOptions.prototype, 'trim', opts);\n/**\n * If truthy, Mongoose will add a custom setter that uppercases this string\n * using JavaScript's built-in `String#toUpperCase()`.\n *\n * @api public\n * @property uppercase\n * @memberOf SchemaStringOptions\n * @type Boolean\n * @instance\n */\n\nObject.defineProperty(SchemaStringOptions.prototype, 'uppercase', opts);\n/*!\n * ignore\n */\n\nmodule.exports = SchemaStringOptions;","map":null,"metadata":{},"sourceType":"script"}